package com.walgreens.oms.utility;



import com.walgreens.common.constant.PhotoOmniConstants;

public class PayOnFulfillmentQuery implements PhotoOmniConstants {

	public static StringBuffer selectPayOnfullfillmentQry() {
		StringBuffer query = new StringBuffer();
		query.append(
				"SELECT A.LOCATION_NUMBER AS STORE_NUMBER,B.CONTACT_NAME AS VENDOR_NAME,C.ENVELOPE_NUMBER,C.ASN_RECEIVED_DTTM,C.COMPLETED_DTTM,C.EDI_TRANSFER_DATE"
				+ "C.VENDOR_PAYMENT_AMOUNT,C.CALCULATED_PRICE,C.REPORTING_DTTM FROM om_pay_on_order_vc_rep C,om_location A,om_vendor B WHERE "
				+ "c.sys_vendor_id=b.sys_vendor_id AND c.sys_location_id=a.sys_location_id AND LOCATION_NUMBER = ? ");
		return query;
	}
	
	public static StringBuilder selectProductDetailsQry() {
		StringBuilder query = new StringBuilder();
		query.append("SELECT * FROM (SELECT COUNT(*) OVER()  AS TOTAL_RECORD,PRODUCT.DESCRIPTION AS PRODUCT_DESCRIPTION,PRODUCT.WIC AS WIC,PRODUCT.UPC AS UPC, ");
		query.append(" ORDER_VC_REP.QUANTITY AS QUANTITY,ORDER_VC_REP.VENDOR_PAYMENT_AMOUNT AS VENDOR_ITEM_COST,rownum Row_no  ");
		query.append(" FROM OM_PAY_ON_ORDER_VC_REP ORDER_VC_REP , OM_PRODUCT PRODUCT ");
		query.append(" WHERE ORDER_VC_REP.SYS_PRODUCT_ID=PRODUCT.SYS_PRODUCT_ID AND ORDER_VC_REP.EDI_UPC = ? ");
		query.append(" GROUP BY PRODUCT.DESCRIPTION,PRODUCT.WIC,PRODUCT.UPC , ORDER_VC_REP.QUANTITY ,ORDER_VC_REP.VENDOR_PAYMENT_AMOUNT,rownum ) ");
		query.append(" WHERE Row_no BETWEEN ? AND ? ORDER BY Row_no");
		return query;
	}
	
	public static StringBuilder selectNonEDINonVendStoreQry(boolean isCsv) { // done
		StringBuilder query = new StringBuilder();
		query.append("SELECT * FROM (SELECT COUNT(*) OVER()   AS TOTAL_RECORD,  T.STORE_NUMBER   AS STORE_NUMBER, T.ENVELOPE_NUMBER  AS ENVELOPE_NUMBER,"
				+ "  T.SUM_VENDOR_TOTAL_COST AS VENDOR_TOTAL_COST, T.EDI_UPC   AS EDI_UPC, T.SUM_QUANTITY   AS QUANTITY, TO_CHAR(T.REPORTING_DTTM,'YYYY-MM-DD')  AS REPORTING_DTTM,"
				+ " TO_CHAR(T.DONE_DATE,'YYYY-MM-DD')   AS DONE_DATE, ROWNUM Row_no FROM (SELECT LOCATION.LOCATION_NBR  AS STORE_NUMBER, ORDER_VC_REP.ENVELOPE_NBR AS ENVELOPE_NUMBER, SUM(ORDER_VC_REP.VENDOR_PAYMENT_AMOUNT) AS SUM_VENDOR_TOTAL_COST,"
				+ "  ORDER_VC_REP.EDI_UPC   AS EDI_UPC, 1    AS SUM_QUANTITY, ORDER_VC_REP.REPORTING_DTTM   AS REPORTING_DTTM, ORDER_VC_REP.COMPLETED_DTTM  AS DONE_DATE"
				+ "  FROM OM_PAY_ON_ORDER_VC_REP ORDER_VC_REP, OM_LOCATION LOCATION, OM_VENDOR VENDOR WHERE LOCATION.SYS_LOCATION_ID=ORDER_VC_REP.SYS_LOCATION_ID"
				+ "  AND ORDER_VC_REP.SYS_VENDOR_ID=VENDOR.SYS_VENDOR_ID AND LOCATION.SYS_LOCATION_ID  =ORDER_VC_REP.SYS_LOCATION_ID AND LOCATION.LOCATION_NBR     = ?"
				+ " AND ORDER_VC_REP.Reporting_Dttm BETWEEN TO_CHAR(TO_DATE(?,'dd-mm-yyyy')) AND TO_CHAR(TO_DATE(?,'dd-mm-yyyy') + 1)  GROUP BY LOCATION.LOCATION_NBR ,"
				+ "  ORDER_VC_REP.ENVELOPE_NBR , ORDER_VC_REP.EDI_UPC, ORDER_VC_REP.REPORTING_DTTM, ORDER_VC_REP.COMPLETED_DTTM  )T  )");
		if(!isCsv){
			query.append(" WHERE Row_no BETWEEN ? AND ? ORDER BY Row_no  ");
		}
		return query;
		
   }

	public static StringBuffer selectEDIVendorDetailsForVendorQry(String startDate, String endDate,String vendorNbr,boolean isCsv) { //done
		StringBuffer query = new StringBuffer();
		
		query.append("SELECT * FROM (SELECT COUNT(*) OVER() AS TOTAL_RECORD,T.STORE_NUMBER AS STORE_NUMBER,T.ENVELOPE_NUMBER AS ENVELOPE_NUMBER,T.ORDER_NUMBER   AS ORDER_NUMBER,TO_CHAR(T.ASN_RECEIVED_DTTM,'YYYY-MM-DD') AS ASN_RECEIVED_DTTM,TO_CHAR(T.EDI_TRANSFER_DATE,'YYYY-MM-DD')  AS EDI_TRANSFER_DATE,T.SUM_VENDOR_TOTAL_COST AS VENDOR_TOTAL_COST,T.EDI_UPC  AS EDI_UPC,");
		query.append(" T.SUM_QUANTITY  AS QUANTITY,T.SUM_RETAIL_PRICE  AS RETAIL_PRICE, TO_CHAR(T.REPORTING_DTTM,'YYYY-MM-DD')  AS REPORTING_DTTM, TO_CHAR(T.DONE_DATE,'YYYY-MM-DD')  AS DONE_DATE, T.VENDOR_NAME AS VENDOR_NAME, ROWNUM Row_no FROM (SELECT LOCATION.LOCATION_NBR AS STORE_NUMBER,ORDER_VC_REP.ENVELOPE_NBR AS ENVELOPE_NUMBER,ORDER_VC_REP.ORDER_NBR AS ORDER_NUMBER,");
		query.append(" ORDER_VC_REP.ASN_RECEIVED_DTTM  AS ASN_RECEIVED_DTTM, ORDER_VC_REP.EDI_TRANSFER_DATE  AS EDI_TRANSFER_DATE,SUM(ORDER_VC_REP.VENDOR_PAYMENT_AMOUNT) AS SUM_VENDOR_TOTAL_COST, ORDER_VC_REP.EDI_UPC AS EDI_UPC,1    AS SUM_QUANTITY,SUM(ORDER_VC_REP.CALCULATED_PRICE)AS SUM_RETAIL_PRICE,");
		query.append(" ORDER_VC_REP.REPORTING_DTTM AS REPORTING_DTTM,ORDER_VC_REP.COMPLETED_DTTM  AS DONE_DATE, VENDOR.VENDOR_NBR   AS VENDOR_NAME FROM OM_PAY_ON_ORDER_VC_REP ORDER_VC_REP JOIN OM_LOCATION LOCATION");
		query.append(" ON LOCATION.SYS_LOCATION_ID=ORDER_VC_REP.SYS_LOCATION_ID  JOIN OM_VENDOR VENDOR  ON ORDER_VC_REP.SYS_VENDOR_ID=VENDOR.SYS_VENDOR_ID  AND LOCATION.SYS_LOCATION_ID =ORDER_VC_REP.SYS_LOCATION_ID" );
		query.append(" AND ORDER_VC_REP.EDI_TRANSFER_DATE BETWEEN TO_CHAR(TO_DATE('"+startDate+"','dd-mm-yyyy')) AND TO_CHAR(TO_DATE('"+endDate+"','dd-mm-yyyy') + 1) ");
		query.append(" AND VENDOR.SYS_VENDOR_ID in (select sys_vendor_id from om_vendor where vendor_nbr in("+vendorNbr+")) GROUP BY LOCATION.LOCATION_NBR ,ORDER_VC_REP.ENVELOPE_NBR , ");
		query.append( "ORDER_VC_REP.ORDER_NBR,ORDER_VC_REP.ASN_RECEIVED_DTTM,ORDER_VC_REP.EDI_TRANSFER_DATE, ORDER_VC_REP.EDI_UPC,ORDER_VC_REP.REPORTING_DTTM,ORDER_VC_REP.COMPLETED_DTTM,VENDOR.VENDOR_NBR  )T ) ");
		
		if(!isCsv){
		  query.append( " WHERE Row_no BETWEEN ? AND ?  order by Row_no");
		}
		return query;
		
   }
	
	
	public static  StringBuffer selectEDIVendorDetailsQry(String vendorNbr,boolean isAll,boolean isCsv){
		StringBuffer query = new StringBuffer();
		
		query.append("SELECT * FROM (SELECT COUNT(*) OVER() AS TOTAL_RECORD,T.STORE_NUMBER AS STORE_NUMBER,T.ENVELOPE_NUMBER AS ENVELOPE_NUMBER,T.SUM_VENDOR_TOTAL_COST AS VENDOR_TOTAL_COST,T.EDI_UPC  AS EDI_UPC,");
		query.append(" T.SUM_QUANTITY  AS QUANTITY, TO_CHAR(T.REPORTING_DTTM,'YYYY-MM-DD')  AS REPORTING_DTTM,  TO_CHAR(T.DONE_DATE,'YYYY-MM-DD')  AS DONE_DATE, ROWNUM Row_no FROM (SELECT LOCATION.LOCATION_NBR AS STORE_NUMBER,ORDER_VC_REP.ENVELOPE_NBR AS ENVELOPE_NUMBER,");
		query.append(" SUM(ORDER_VC_REP.VENDOR_PAYMENT_AMOUNT) AS SUM_VENDOR_TOTAL_COST, ORDER_VC_REP.EDI_UPC AS EDI_UPC,1    AS SUM_QUANTITY,");
		query.append(" ORDER_VC_REP.REPORTING_DTTM AS REPORTING_DTTM,ORDER_VC_REP.COMPLETED_DTTM  AS DONE_DATE  FROM OM_PAY_ON_ORDER_VC_REP ORDER_VC_REP,OM_LOCATION LOCATION,OM_VENDOR VENDOR ");
		query.append(" WHERE LOCATION.SYS_LOCATION_ID=ORDER_VC_REP.SYS_LOCATION_ID  AND ORDER_VC_REP.SYS_VENDOR_ID=VENDOR.SYS_VENDOR_ID  AND LOCATION.SYS_LOCATION_ID =ORDER_VC_REP.SYS_LOCATION_ID" );
		query.append(" AND ORDER_VC_REP.REPORTING_DTTM BETWEEN TO_CHAR(TO_DATE(?,'dd-mm-yyyy')) AND TO_CHAR(TO_DATE(?,'dd-mm-yyyy') + 1) ");
		if(isAll){
			query.append(" AND LOCATION.LOCATION_NBR  = ? ");
			query.append(" AND VENDOR.SYS_VENDOR_ID in (select sys_vendor_id from om_vendor where vendor_nbr in("+vendorNbr+")) ");
			
		}
		query.append("GROUP BY LOCATION.LOCATION_NBR ,ORDER_VC_REP.ENVELOPE_NBR , ");
		query.append( " ORDER_VC_REP.EDI_UPC,ORDER_VC_REP.REPORTING_DTTM,ORDER_VC_REP.COMPLETED_DTTM  ) ");
		query.append(" T) ");
		if(!isCsv){
		  query.append( " WHERE Row_no BETWEEN ? AND ?  order by Row_no");
		}
		return query;
	}
	
	
	
	
	public static StringBuffer selectEDIDetailsQry(boolean isStoreEDI) {
		StringBuffer query = new StringBuffer();
		String strCond ="";
		if(isStoreEDI){
			strCond = " AND LOCATION.LOCATION_NBR = ? ";
		}
		query.append(
				"SELECT LOCATION.LOCATION_NBR   AS STORE_NUMBER,ORDER_VC_REP.ENVELOPE_NBR  AS ENVELOPE_NUMBER,TO_CHAR(ORDER_VC_REP.ASN_RECEIVED_DTTM,'YYYY-MM-DD')  AS ASN_RECEIVED_DTTM,"
				+ " TO_CHAR(ORDER_VC_REP.EDI_TRANSFER_DATE,'YYYY-MM-DD')   AS EDI_TRANSFER_DATE,ORDER_VC_REP.VENDOR_PAYMENT_AMOUNT AS VENDOR_TOTAL_COST,ORDER_VC_REP.EDI_UPC  AS EDI_UPC,"
				+ " ORDER_VC_REP.CALCULATED_PRICE      AS RETAIL_PRICE, TO_CHAR(ORDER_VC_REP.REPORTING_DTTM,'YYYY-MM-DD') AS REPORTING_DTTM, TO_CHAR(ORDER_VC_REP.COMPLETED_DTTM,'YYYY-MM-DD')   AS DONE_DATE,"
				+ " VENDOR.DESCRIPTION   AS VENDOR_NAME FROM OM_PAY_ON_ORDER_VC_REP ORDER_VC_REP, Om_Location LOCATION, Om_Vendor Vendor WHERE Order_Vc_Rep.Sys_Location_Id =LOCATION.Sys_Location_Id"
				+ " AND Order_Vc_Rep.Sys_Vendor_Id     =Vendor.Sys_Vendor_Id AND Order_Vc_Rep.Edi_Upc  = ? ");
		query.append(strCond);
		return query;
   }
	
	/**
	 * This method create the SQL select query for Vendor  type 
	 * @return query
	 *//*
	public static StringBuffer getVendorListQueryForPOF() {
		StringBuffer query = new StringBuffer();
		query.append("SELECT DISTINCT CODE_DECODE.CODE_ID AS CODE,"
				+ "CODE_DECODE.DECODE AS DECODE,VENDOR.SYS_VENDOR_ID AS VENDOR_ID,"
				+ "VENDOR.DESCRIPTION AS DESCRIPTION FROM OM_CODE_DECODE CODE_DECODE JOIN OM_VENDOR VENDOR ON VENDOR.VENDOR_NBR=CODE_DECODE.DECODE WHERE CODE_DECODE.CODE_TYPE='Parent_Vendor' ");
		return query;
	}*/
	
	
	public static StringBuilder getVendorListQueryForPOF() {
		StringBuilder query = new StringBuilder();
		query.append("SELECT DISTINCT CODE_DECODE.CODE_ID AS VENDOR_ID,CODE_DECODE.DECODE  AS DESCRIPTION "
				+ " FROM OM_CODE_DECODE CODE_DECODE WHERE CODE_DECODE.CODE_TYPE='Parent_Vendor' ");
		return query;
		
	}
	
	public static StringBuilder getVendorListQueryForApproveVendor(){
		StringBuilder query = new StringBuilder();
		query.append("SELECT DISTINCT VEND.SYS_VENDOR_ID AS VENDOR_ID,VEND.DESCRIPTION  AS DESCRIPTION "
				+"FROM OM_VENDOR VEND WHERE VEND.VENDOR_TYPE = 'FULFILLMENT' ");
		return query;
		
	}
	
	public static StringBuilder getVendorPaymentCostApprovalQry(String paramCond){
		String strCond ="";
		if(POF_STORE_TYPE_SV.equalsIgnoreCase(paramCond)){
			strCond =" AND LOCATION.LOCATION_NBR = ? AND VENDOR.SYS_VENDOR_ID IN(?)"; 
		}
		else if(POF_STORE_TYPE_S.equalsIgnoreCase(paramCond)){
			strCond = " AND LOCATION.LOCATION_NBR = ? ";
		}
		else if(POF_STATUS_IND_V.equalsIgnoreCase(paramCond)){
			strCond = " AND VENDOR.SYS_VENDOR_ID  IN(?)   ";
		}
		else if(POF_STORE_TYPE_BLANK.equalsIgnoreCase(paramCond)){
			strCond ="";
		}
		StringBuilder query = new StringBuilder();
		query.append("SELECT * FROM (SELECT TOTAL_RECORD,STORE_NUMBER,ENVELOPE_NUMBER,PRODUCT_DESCRIPTION,VENDOR_NAME,CENTRAL_CALCULATED_VEND_PMT,STORE_CALCULATED_VEND_COST,");
		query.append(" ORDER_VC_ID,ROWNUM AS RN FROM (SELECT COUNT(*) over()  AS TOTAL_RECORD, LOCATION.LOCATION_NBR  AS STORE_NUMBER, ORDER_VC_REP.ENVELOPE_NBR  AS ENVELOPE_NUMBER,PRODUCT.DESCRIPTION   AS PRODUCT_DESCRIPTION,");
		query.append(" VENDOR.DESCRIPTION  AS VENDOR_NAME, ORDER_VC_REP.CALCULATED_VENDOR_PAYMENT  AS CENTRAL_CALCULATED_VEND_PMT, ORDER_VC_REP.VENDOR_PAYMENT_AMOUNT AS STORE_CALCULATED_VEND_COST,");
		query.append(" ORDER_VC_REP.SYS_PAY_ON_ORDER_VC_ID     AS ORDER_VC_ID FROM OM_PAY_ON_ORDER_VC_AUDIT ORDER_VC_AUDIT,OM_PAY_ON_ORDER_VC_REP ORDER_VC_REP,OM_LOCATION LOCATION,OM_PRODUCT PRODUCT,OM_VENDOR VENDOR");
				
		query.append(" WHERE ORDER_VC_REP.SYS_PAY_ON_ORDER_VC_ID = ORDER_VC_AUDIT.SYS_PAY_ON_ORDER_VC_ID AND  LOCATION.SYS_LOCATION_ID =ORDER_VC_REP.SYS_LOCATION_ID");
		query.append(" AND ORDER_VC_REP.SYS_PRODUCT_ID=PRODUCT.SYS_PRODUCT_ID AND ORDER_VC_REP.SYS_VENDOR_ID=VENDOR.SYS_VENDOR_ID AND ORDER_VC_REP.STATUS_CD   ='V' ");
		query.append(strCond);
		query.append(" GROUP BY LOCATION.LOCATION_NBR,ORDER_VC_REP.SYS_PAY_ON_ORDER_VC_ID,ORDER_VC_REP.ENVELOPE_NBR,PRODUCT.DESCRIPTION,VENDOR.DESCRIPTION, ORDER_VC_REP.CALCULATED_VENDOR_PAYMENT , ORDER_VC_REP.VENDOR_PAYMENT_AMOUNT");
		query.append(" )  ) WHERE  RN>=? AND RN<=?");		
		return query;
	}
	
	public static StringBuffer  getVendorCostvalidationCount (){
		StringBuffer query = new StringBuffer();
		query.append("");
		return query;
	}
	
	public static StringBuilder  updateVendorpaymentApproval(){
		StringBuilder query = new StringBuilder();
		query.append("UPDATE OM_PAY_ON_ORDER_VC_REP SET VENDOR_PAYMENT_AMOUNT =? ,PREV_VENDOR_PAYMENT_AMOUNT = ? ,UPDATE_USER_ID =? , UPDATE_DTTM = SYSDATE , STATUS_CD = ? WHERE ENVELOPE_NBR = ? AND SYS_PAY_ON_ORDER_VC_ID =? ");
		return query;
	}
}
