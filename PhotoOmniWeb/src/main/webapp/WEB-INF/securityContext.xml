<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- Enable auto-wiring -->
	<context:annotation-config />

	<!-- Scan for auto-wiring classes in spring saml packages -->
	<context:component-scan base-package="org.springframework.security.saml" />
	
	<!-- Secured pages with SAML as entry point -->
	<security:http entry-point-ref="samlEntryPoint" use-expressions="false" create-session="stateless">
		<security:intercept-url pattern="/css/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/images/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/pages/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/res/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />

		<security:custom-filter before="FIRST" ref="metadataGeneratorFilter" />
		<security:custom-filter after="BASIC_AUTH_FILTER" ref="customCompositeFilters" />

	</security:http>
	
	<!-- Filter chain to be used after BASIC_AUTH_FILTER -->
	<bean id="customCompositeFilters" class="org.springframework.web.filter.CompositeFilter">
    	<property name="filters">
        	<list>
            	<ref bean="cookieAuthenticationFilter"/>        	
            	<ref bean="samlFilterChainMap"/>
        	</list>
    	</property>
	</bean>	

	<bean id="samlFilterChainMap" class="org.springframework.security.web.FilterChainProxy">
		<security:filter-chain-map request-matcher="ant">
			<security:filter-chain pattern="/saml/metadata/**" filters="metadataDisplayFilter"/>
			<security:filter-chain pattern="/saml/login/**" filters="samlEntryPoint" />
			<security:filter-chain pattern="/saml/discovery/**" filters="samlIDPDiscovery"/>
			<security:filter-chain pattern="/saml/SSO/**" filters="samlWebSSOProcessingFilter" />
			<security:filter-chain pattern="/saml/logout/**" filters="samlLogoutFilter"/>
			<security:filter-chain pattern="/saml/SingleLogout/**" filters="samlLogoutProcessingFilter"/>			
		</security:filter-chain-map>
	</bean>
	
	<bean id="cookieAuthenticationFilter"	class="com.walgreens.common.security.oam.CookieAuthenticationFilter">
		<property name="cookiename" value="${security.persist.cookie.name}" />
		<property name="cookietimeout" value="${security.persist.cookie.timeout}" />
		<property name="cookiepath" value="${security.persist.cookie.path}" />
		<property name="advancedEncryptionStandard" ref="advancedEncryptionStandard" />
		<property name="authRepository" ref="authRepository" />
		<property name="secureCookie" value="${security.persist.cookie.secure}" />
		<property name="sidCookieName" value="${security.sid.cookie.name}" />
		<property name="ipHash" value="${ipHash}" />
	</bean>	

	<!-- Entry point to initialize authentication, default values taken from properties file -->
	<bean id="samlEntryPoint" class="com.walgreens.common.security.oam.WalgreensSAMLEntryPoint">
		<property name="defaultProfileOptions"> 
			<bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
				<property name="includeScoping" value="false" />
			</bean>
		</property>
		<property name="urlAwareCookieName" value="${security.url.aware.cookie.name}" />
		<property name="secureCookie" value="${security.persist.cookie.secure}" />
	</bean>
		
	<!-- IDP Discovery Service -->
    <bean id="samlIDPDiscovery" class="org.springframework.security.saml.SAMLDiscovery">
        <property name="idpSelectionPath" value="/WEB-INF/security/idpSelection.jsp"/>
    </bean>
    
    <!-- Handler for successful logout -->
    <bean id="successLogoutHandler" class="com.walgreens.common.security.oam.RemoveAuthCookieLogoutSuccessHandler">
        <property name="defaultTargetUrl" value="/"/>
		<property name="cookiename" value="${security.persist.cookie.name}" />
		<property name="cookiepath" value="${security.persist.cookie.path}" />
		<property name="urlAwareCookieName" value="${security.url.aware.cookie.name}" />    
		<property name="authRepository" ref="authRepository" />
		<property name="oamGlobalLogoutUrl" value="${oam.global.logout.url}"/>
		<property name="secureCookie" value="${security.persist.cookie.secure}" />
		<property name="sidCookieName" value="${security.sid.cookie.name}" />
    </bean>
    
    <!-- Logout handler terminating local session -->
    <bean id="sessionlogoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
        <property name="invalidateHttpSession" value="false"/>
    </bean>    

    <!-- Override default logout processing filter with the one processing SAML messages -->
    <bean id="samlLogoutFilter" class="org.springframework.security.saml.SAMLLogoutFilter">
        <constructor-arg index="0" ref="successLogoutHandler"/>
        <constructor-arg index="1" ref="sessionlogoutHandler"/>
        <constructor-arg index="2" ref="sessionlogoutHandler"/>
    </bean>    
    
    <!-- Filter processing success logout notification from IDP -->
    <!-- First argument determines URL user will be redirected to after successful global logout -->
    <!-- Second argument clears HTTP Session -->
    <bean id="samlLogoutProcessingFilter" class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
        <constructor-arg index="0" ref="successLogoutHandler"/>
        <constructor-arg index="1" ref="sessionlogoutHandler"/>
    </bean>    
    
	<!-- Filter automatically generates default SP metadata -->
	<bean id="metadataGeneratorFilter"
		class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
		<constructor-arg>
			<bean class="org.springframework.security.saml.metadata.MetadataGenerator">
				<property name="entityId" value="${security.saml.provider.name}" />
				<property name="entityBaseURL" value="${security.sp.base.entityBaseURL}"/>
				<property name="extendedMetadata">
					<bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
						<property name="idpDiscoveryEnabled" value="true" />
					</bean>
				</property>
			</bean>
		</constructor-arg>
	</bean>
	
    <!-- The filter is waiting for connections on URL suffixed with filterSuffix and presents SP metadata there -->
    <bean id="metadataDisplayFilter" class="org.springframework.security.saml.metadata.MetadataDisplayFilter"/>
		
    <!-- Provider of default SAML Context -->
    <bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderImpl">
    	<property name="storageFactory">
    		<bean class="org.springframework.security.saml.storage.EmptyStorageFactory"/>
  		</property>
    </bean>

	<!-- Processing filter for WebSSO profile messages -->
	<bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationSuccessHandler" ref="successRedirectHandler" />
		<property name="authenticationFailureHandler" ref="failureRedirectHandler" />
	</bean>

	<!-- Register authentication manager for SAML provider -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="samlAuthenticationProvider" />
	</security:authentication-manager>
	
	<!-- Logger for SAML messages and events -->
    <bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger"/>
	
	<!-- SAML Authentication Provider responsible for validating of received SAML messages -->
	<bean id="samlAuthenticationProvider" class="com.walgreens.common.security.oam.WalgreensSAMLAuthenticationProvider">
		<property name="userDetails" ref="userDetailsService" />
	</bean>

	<!--  UserDetailServiceImpl for creating SAMLUserDetails -->	
	<bean id="userDetailsService" class="com.walgreens.common.security.oam.SAMLUserDetailsServiceImpl"/>

	<!-- Handler deciding where to redirect user after successful login -->
	<bean id="successRedirectHandler" class="com.walgreens.common.security.oam.WalgreensSavedRequestAwareAuthSuccessHandler">
		<property name="urlAwareCookieName" value="${security.url.aware.cookie.name}" />
		<property name="defaultTargetUrl" value="/" />
		<property name="cookiename" value="${security.persist.cookie.name}" />
		<property name="cookietimeout" value="${security.persist.cookie.timeout}" />
		<property name="cookiepath" value="${security.persist.cookie.path}" />
		<property name="advancedEncryptionStandard" ref="advancedEncryptionStandard" />
		<property name="userDetailBO" ref="userDetailBO" />
		<property name="authRepository" ref="authRepository" />
		<property name="secureCookie" value="${security.persist.cookie.secure}" />
		<property name="sidCookieName" value="${security.sid.cookie.name}" />
		<property name="ipHash" value="${ipHash}" />		
	</bean>

	<!-- Handler deciding where to redirect user after failed login -->
	<bean id="failureRedirectHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<property name="useForward" value="true" />
		<property name="defaultFailureUrl" value="/pages/error.jsp" />
	</bean>

	<!-- Central storage of cryptographic keys -->
	<bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
		<constructor-arg value="classpath:security/samlkeystore_${env}.jks" />
		<constructor-arg type="java.lang.String" value="${oam.cert.jks.passwd}" />
		<constructor-arg>
			<map>
				<entry key="${oam.cert.alias.name}" value="${oam.cert.jks.passwd}" />
			</map>
		</constructor-arg>
		<constructor-arg type="java.lang.String" value="${oam.cert.alias.name}" />
	</bean>

	<!-- IDP Metadata configuration - paths to metadata of IDPs in circle of trust is here -->
	<bean id="metadata" class="org.springframework.security.saml.metadata.CachingMetadataManager">
		<constructor-arg>
			<list>
				<!-- Example of classpath metadata with Extended Metadata -->
				<bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
					<constructor-arg>
						<bean class="org.opensaml.saml2.metadata.provider.ResourceBackedMetadataProvider">
							<constructor-arg>
								<bean class="java.util.Timer" />
							</constructor-arg>
							<constructor-arg>
								<bean class="org.opensaml.util.resource.ClasspathResource">
									<constructor-arg value="/metadata/idp-${env}.xml" />
								</bean>
							</constructor-arg>
							<property name="parserPool" ref="parserPool" />
						</bean>
					</constructor-arg>
					<constructor-arg>
						<bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
						</bean>
					</constructor-arg>
					<property name="metadataTrustCheck" value="false"/>
				</bean>
			</list>
		</constructor-arg>
	</bean>

	<!-- Class loading incoming SAML messages from httpRequest stream -->
	<bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
		<constructor-arg>
			<list>
				<ref bean="redirectBinding" />
				<ref bean="postBinding" />
				<ref bean="artifactBinding" />
				<ref bean="soapBinding" />
				<ref bean="paosBinding" />
			</list>
		</constructor-arg>
	</bean>

	<!-- SAML 2.0 WebSSO Assertion Consumer -->
	<bean id="webSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl">
		<property name="responseSkew" value="300" />
	</bean>

	<!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->
	<bean id="hokWebSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl" />

	<!-- SAML 2.0 Web SSO profile -->
	<bean id="webSSOprofile" class="org.springframework.security.saml.websso.WebSSOProfileImpl" />

	<!-- SAML 2.0 Holder-of-Key Web SSO profile -->
	<bean id="hokWebSSOProfile" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl" />

	<!-- SAML 2.0 ECP profile -->
	<bean id="ecpprofile" class="org.springframework.security.saml.websso.WebSSOProfileECPImpl" />

	<!-- SAML 2.0 Logout Profile -->
	<bean id="logoutprofile" class="org.springframework.security.saml.websso.SingleLogoutProfileImpl" >
		<property name="responseSkew" value="300" />
	</bean>

	<!-- Bindings, encoders and decoders used for creating and parsing messages -->
	<bean id="postBinding" class="org.springframework.security.saml.processor.HTTPPostBinding">
		<constructor-arg ref="parserPool" />
		<constructor-arg ref="velocityEngine" />
	</bean>

	<bean id="redirectBinding" class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
		<constructor-arg ref="parserPool" />
	</bean>

	<bean id="artifactBinding" class="org.springframework.security.saml.processor.HTTPArtifactBinding">
		<constructor-arg ref="parserPool" />
		<constructor-arg ref="velocityEngine" />
		<constructor-arg>
			<bean class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
				<constructor-arg>
					<bean class="org.apache.commons.httpclient.HttpClient">
						<constructor-arg>
							<bean class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager" />
						</constructor-arg>
					</bean>
				</constructor-arg>
				<property name="processor">
					<bean class="org.springframework.security.saml.processor.SAMLProcessorImpl">
						<constructor-arg ref="soapBinding" />
					</bean>
				</property>
			</bean>
		</constructor-arg>
	</bean>

	<bean id="soapBinding" class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
		<constructor-arg ref="parserPool" />
	</bean>

	<bean id="paosBinding" class="org.springframework.security.saml.processor.HTTPPAOS11Binding">
		<constructor-arg ref="parserPool" />
	</bean>

	<!-- Initialization of OpenSAML library -->
	<bean class="org.springframework.security.saml.SAMLBootstrap" />

	<!-- Initialization of the velocity engine -->
	<bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory" factory-method="getEngine" />

	<!-- XML parser pool needed for OpenSAML parsing -->
	<bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool" init-method="initialize">
		<property name="builderFeatures">
			<map>
				<entry key="http://apache.org/xml/features/dom/defer-node-expansion" value="false" />
			</map>
		</property>
	</bean>

	<bean id="parserPoolHolder" class="org.springframework.security.saml.parser.ParserPoolHolder" />
	
	<bean id="advancedEncryptionStandard" class="com.walgreens.common.security.oam.AdvancedEncryptionStandard">
		<property name="encryptionKey" value="${security.persist.cookie.encrypt.key}" />
		<property name="iv" value="${security.persist.cookie.encrypt.iv}" />
	</bean>
	
	<bean id="userDetailBO" class="com.walgreens.common.security.oam.bo.UserDetailBOImpl">
		<property name="userDetailDAO" ref="userDetailDAO" />		
	</bean>
	
	<bean id="userDetailDAO" class="com.walgreens.common.security.oam.dao.UserDetailDAOImpl">
		<property name="jdbcTemplate" ref="omniJdbcTemplate" />		
	</bean>
	
	<bean id="authRepository" class="com.walgreens.common.cache.AuthRepositoryImpl">
  		<property name="redisTemplate" ref="redisTemplate"/>
 	</bean>
		
</beans>
